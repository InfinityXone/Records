-- Omega schema patch for Infinity X One
--
-- This migration adds indexes and foreign keys to improve performance
-- and ensure referential integrity.  It also creates new tables used
-- by the backend workers in this deployment package.

-- Add indexes for agent logs and profit ledger
CREATE INDEX IF NOT EXISTS idx_agent_logs_ts ON agent_logs(ts);
CREATE INDEX IF NOT EXISTS idx_profit_ledger_wallet_ts ON profit_ledger(wallet, ts);
CREATE INDEX IF NOT EXISTS idx_faucet_logs_wallet ON faucet_logs(wallet);
CREATE INDEX IF NOT EXISTS idx_agent_directives_status ON agent_directives(status, timestamp);

-- Enforce foreign keys where appropriate
ALTER TABLE IF EXISTS profit_ledger
  ADD CONSTRAINT IF NOT EXISTS profit_ledger_wallet_fkey
  FOREIGN KEY (wallet) REFERENCES wallets(address);

-- Create table for API keys harvested by KeyHarvester
CREATE TABLE IF NOT EXISTS api_keys (
  id BIGSERIAL PRIMARY KEY,
  provider TEXT NOT NULL,
  key TEXT NOT NULL,
  agent TEXT NOT NULL,
  ts TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create table for compute nodes provisioned by Atlas
CREATE TABLE IF NOT EXISTS compute_nodes (
  id BIGSERIAL PRIMARY KEY,
  agent TEXT NOT NULL,
  region TEXT NOT NULL,
  endpoint TEXT NOT NULL,
  status TEXT NOT NULL,
  ts TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create table for anomaly logs
CREATE TABLE IF NOT EXISTS anomaly_logs (
  id BIGSERIAL PRIMARY KEY,
  agent TEXT NOT NULL,
  token TEXT NOT NULL,
  description TEXT NOT NULL,
  ts TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create table for wallet balances
CREATE TABLE IF NOT EXISTS wallet_balances (
  id BIGSERIAL PRIMARY KEY,
  agent TEXT NOT NULL,
  address TEXT NOT NULL,
  balance NUMERIC,
  ts TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Create table for reward events (FinSynapse)
CREATE TABLE IF NOT EXISTS reward_events (
  id BIGSERIAL PRIMARY KEY,
  agent TEXT NOT NULL,
  reward NUMERIC NOT NULL,
  ts TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table for replication events logged by Replicator
CREATE TABLE IF NOT EXISTS replication_events (
  id BIGSERIAL PRIMARY KEY,
  agent TEXT NOT NULL,
  agent_name TEXT NOT NULL,
  node TEXT NOT NULL,
  status TEXT NOT NULL,
  ts TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table for optimisation actions proposed by PickyBot
CREATE TABLE IF NOT EXISTS optimisation_actions (
  id BIGSERIAL PRIMARY KEY,
  agent TEXT NOT NULL,
  target_agent TEXT NOT NULL,
  score NUMERIC NOT NULL,
  action TEXT NOT NULL,
  ts TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table for generated code stored by Codex
CREATE TABLE IF NOT EXISTS generated_code (
  id BIGSERIAL PRIMARY KEY,
  agent TEXT NOT NULL,
  spec JSONB NOT NULL,
  code TEXT NOT NULL,
  ts TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- -------------------------------------------------------------------------
-- Additional tables for unified scraping and predictions
--

-- Table to store historical market prices.  Symbols can include both
-- cryptocurrencies and traditional assets.  The ``price`` column holds
-- the closing price in USD (or a canonical currency) at the given timestamp.
CREATE TABLE IF NOT EXISTS market_prices (
  id BIGSERIAL PRIMARY KEY,
  symbol TEXT NOT NULL,
  price NUMERIC NOT NULL,
  ts TIMESTAMP WITH TIME ZONE NOT NULL
);

-- Table to register scraping jobs.  Each job specifies a source (e.g. 'web',
-- 'github', 'darkweb'), a target URL or query, optional parse rules as JSON,
-- and a frequency indicator (e.g. 'hourly', 'daily').  ``results_table``
-- specifies where the scraped data should be inserted.  ``last_run`` and
-- ``status`` track execution state.
CREATE TABLE IF NOT EXISTS scraper_jobs (
  id BIGSERIAL PRIMARY KEY,
  source TEXT NOT NULL,
  url TEXT,
  query TEXT,
  parse_rules JSONB,
  frequency TEXT NOT NULL,
  results_table TEXT NOT NULL DEFAULT 'scraper_results',
  status TEXT NOT NULL DEFAULT 'scheduled',
  last_run TIMESTAMP WITH TIME ZONE
);

-- Table to store results of scraper jobs.  The ``job_id`` references
-- ``scraper_jobs.id``.  ``data`` contains the parsed output as JSON.
CREATE TABLE IF NOT EXISTS scraper_results (
  id BIGSERIAL PRIMARY KEY,
  job_id BIGINT NOT NULL REFERENCES scraper_jobs(id),
  data JSONB NOT NULL,
  fetched_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table to store predictions generated by agents (e.g. FinSynapse).  The
-- ``symbol`` indicates what asset or faucet the prediction is for; the
-- ``prediction`` column stores a JSON object containing the predicted
-- values, confidence intervals, etc.
CREATE TABLE IF NOT EXISTS predictions (
  id BIGSERIAL PRIMARY KEY,
  symbol TEXT NOT NULL,
  prediction JSONB NOT NULL,
  predicted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Table to track wallet assignments and rotations.  Each row records
-- the assignment of a wallet address to a particular agent along with
-- timestamps for creation and rotation.  ``rotated_at`` is nullable
-- for active assignments.
CREATE TABLE IF NOT EXISTS wallet_ledger (
  id BIGSERIAL PRIMARY KEY,
  wallet_address TEXT NOT NULL,
  agent TEXT NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  rotated_at TIMESTAMP WITH TIME ZONE
);